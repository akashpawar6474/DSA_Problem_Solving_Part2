# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        this can be done using level order traversal
        """
        from collections import deque
        if root is None:
            return ""
        q = deque()
        q.append(root)
        ans = []
        while q:
            top = q.popleft()
            if top:
                ans.append(str(top.val))
                q.append(top.left)
                q.append(top.right)
            else:
                ans.append("#")
        return ",".join(ans)

        

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        from collections import deque
        if data == "":
            return None
        q = deque()
        data = data.split(',')
        root = TreeNode(data[0])
        q.append(root)
        n = len(data)
        idx = 1
        while q:
            currNode = q.popleft()
            if idx < n and data[idx] == "#":
                idx += 1
            elif idx < n:
                leftChild = TreeNode(int(data[idx]))
                q.append(leftChild)
                currNode.left = leftChild
                idx += 1
            if idx < n and data[idx] == "#":
                idx += 1
            elif idx < n:
                rightChild = TreeNode(int(data[idx]))
                q.append(rightChild)
                currNode.right = rightChild
                idx += 1
        return root

        

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
