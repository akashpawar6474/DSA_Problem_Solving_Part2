import heapq
class DllNode:
    def __init__(self,val = 0):
        self.val = val
        self.next = None
        self.prev = None
        

class FreqStack:
    def __init__(self):
        """
        use array of stacks
        and keep frequency map too
        
        push(5) => now freq is 1
        if stack is not present on that idx create stack and append 5
        push(7) => freq of 7 is 1
        so append to the stack on freq 1
        push(5) freq is 2
        stack is not present on freq 2 so create stack and append
        push(7) freq of 7 is 2
        so append to stack on idx 2
        and so on
        
        as per example after all push operations 
        array of stack look like
        
        for freq we can consider freq - 1
        
        freq no         elements
        0               5,7,4
        1               5,7
        2               5
        
        now if pop comes from last stack pop the top
        if stack becomes empty them pop the last stack too
        and reduce the freq of 5 and so on
        
        THis is very easy problem by using stack of stacks
        and very efficient in time also.
        """
        self.stackOfStacks = []
        self.ht = {}
    
    def push(self,val):
        if val not in self.ht:
            self.ht[val] = 0
        self.ht[val] += 1
        if self.ht[val] > len(self.stackOfStacks):
            self.stackOfStacks.append([])
        freqIdx = self.ht[val] - 1
        self.stackOfStacks[freqIdx].append(val)
        
    def pop(self):
        lastStackIdx = len(self.stackOfStacks) - 1
        stackOnLastIdx = self.stackOfStacks[lastStackIdx]
        top = stackOnLastIdx.pop()
        self.ht[top] -= 1
        if len(stackOnLastIdx) == 0:
            self.stackOfStacks.pop()
        return top
            
class FreqStackUsingMaxHeap:
    def __init__(self):
        self.ht = {}
        self.maxHeap = []
        self.currIdx = 0
    
    def push(self,val):
        if val not in self.ht:
            self.ht[val] = 0
        self.ht[val] += 1
        heapq.heappush(self.maxHeap,(-self.ht[val],-self.currIdx,val))
        self.currIdx += 1
    
    def pop(self):
        topFreq,latestIdx,key = heapq.heappop(self.maxHeap)
        self.ht[key] -= 1
        return key
        
class FreqStackFirstTry:

    def __init__(self):
        """
        do we need to use maxHeap here?
        if yes do we need to modify it for each push
        
        or can we just modify stack and freq map only
        do we need to create max Heap only when pop is called?
        
        what to store in hashmap
        no as key and list of 2 ele where first ele is freq and second ele is currIdx
        if our stack looks like this [5,7,5,7,4,5]
        then our freq table should look like
        key val(freq,latestIdx)
        5   [3,5],[2,2],[1,0] value list should be stack of tuples
        7   [2,3],[1,1]
        4   [1,4]
        
        while adding new record take top record inc the freq and addcurr idx
        If pop gets called we will construct maxHeap
                    [5,3,5]
                /           \
                [7,2,3]       [4,1,4]
        return first ele value 
        and pop the value from the stack
        pop the value from value list of that key in map so map looks like
        key val(freq,latestIdx)
        5   [2,2],[1,0] value list should be stack of tuples
        7   [2,3],[1,1]
        4   [1,4]
        
        take top of that key and update value in maxHeap
        so maxHeap looks like
                        [7,2,3]
                    /           \
                    [5,2,2]     [4,1,4]
                    
        we will construct dll with head and tail ptr as stack
        and in hashmap we will also store the refercence of node along with freq and idx tuple
        so now we are popping 7 as most frequent node right?
        then we can remove that from stack using the refernce
        then take pop the tuple from the value list
                        [5,2,2]
                    /           \
                    [7,1,1]     [4,1,4]
        return 5 and pop 5
                        [4,1,4]
                    /           \
                    [5,1,0]     [7,1,1]
        return 4 pop 4 
        
        One trick is that we cant maintain max heap along the life cylcle
        because after popping 4 stack remains with 5,7
        and heap looks like
                    [7,1,1]
                /
                [5,1,0]
        If we insert 5 in stack then we cant directly access record of 5 right?
        so whenvever we get push operation reinitialize the maxHeap
        """
        self.currIdx = -1
        self.head = DllNode(-1)
        self.tail = DllNode(-1)
        self.head.next = self.tail
        self.tail.prev = self.head
        self.maxHeap = None
        self.ht = {}
        
    def addNewNode(self,val):
        newNode = DllNode(val)
        tailPrev = self.tail.prev
        newNode.next = self.tail
        newNode.prev = tailPrev
        tailPrev.next = newNode
        self.tail.prev = newNode
        return newNode
    
    def removeNode(self,node):
        nodePrev = node.prev
        nodeNext = node.next
        nodePrev.next = nodeNext
        nodeNext.prev = nodePrev
    
    def printList(self):
        curr = self.head
        while curr:
            print(curr.val,end = ' ')
            curr = curr.next
        print()
        
        
    def push(self, val: int) -> None:
        self.currIdx += 1
        newNode = self.addNewNode(val)
        if val not in self.ht:
            self.ht[val] = [(1,self.currIdx,newNode)]
        else:
            valList = self.ht[val]
            prevFreq,prevIdx,prevNode = valList[-1]
            currFreq = prevFreq + 1
            self.ht[val].append((currFreq,self.currIdx,newNode))
        self.maxHeap = None

    def generateMaxHeap(self):
        self.maxHeap = []
        for key,val in self.ht.items():
            topFreq,latestIdx,latestNode = val[-1]
            currRecord = [-topFreq,-latestIdx,key,latestNode]
            heapq.heappush(self.maxHeap,currRecord)
        return self.maxHeap

    def pop(self) -> int:
        if self.maxHeap is None:
            self.maxHeap = self.generateMaxHeap()
        topFreq,latestIdx,key,nodeRef = heapq.heappop(self.maxHeap)
        self.removeNode(nodeRef)
        self.ht[key].pop()
        if len(self.ht[key]) > 0:
            prevFreq,prevIdx,node = self.ht[key][-1]
            currRecord = [-prevFreq,-prevIdx,key,node]
            heapq.heappush(self.maxHeap,currRecord)
        return key

--------------------------------------------------------------------------------20 march 2022
class Solution:
    # @param A : list of list of integers
    # @return a list of integers
    def solve(self, A):
        def push(stackOfStacks,ht,x):
            if x not in ht:
                ht[x] = 0
            ht[x] += 1
            if ht[x] > len(stackOfStacks):
                stackOfStacks.append([])
            stackOfStacks[ht[x] - 1].append(x)
            return -1

        def pop(stackOfStacks,ht):
            top = stackOfStacks[-1].pop()
            if len(stackOfStacks[-1]) == 0:
                stackOfStacks.pop()
            ht[top] -= 1
            if ht[top] == 0:
                del ht[top]
            return top

        stackOfStacks = []
        ht = {}
        ans = []
        for op,ele in A:
            if op == 1:
                ans.append(push(stackOfStacks,ht,ele))
            else:
                ans.append(pop(stackOfStacks,ht))
        return ans
        

