class Solution:
    # @param A : string
    # @return a strings
    def solve(self, A):
        def isOperand(ch):
            return ch.isalpha()

        precedenceMap = {}
        precedenceMap['+'] = 0
        precedenceMap['-'] = 0
        precedenceMap['*'] = 1
        precedenceMap['/'] = 1
        precedenceMap['^'] = 2

        ans = []
        st = []
        for ch in A:
            if isOperand(ch):
                ans.append(ch)
            elif ch == '(':
                st.append(ch)
            elif ch == ')':
                while st[-1] != '(':
                    ans.append(st.pop())
                st.pop()
            else:
                while len(st) > 0 and st[-1] != '(' and precedenceMap[st[-1]] >= precedenceMap[ch]:
                    ans.append(st.pop())
                st.append(ch)
        while st:
            ans.append(st.pop())
        return "".join(ans)
