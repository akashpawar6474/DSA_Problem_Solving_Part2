# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.firstDiscrepancy = []
        self.secondDiscrepancy = []
        self.prev = None
        
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        Idea is to find the discrepancies
        if there is only one discrepancy then replace its start and end
        else replace start of first discrepancy and end of second discrepancy
        
        we can get those discrapancies using inorder traversal
                    2
                3       4
                     1
                    
        tc = O(n)
        sc = O(n)
        """
        def inorder(root):
            if root is None:
                return
            inorder(root.left)
            if self.prev is not None and root.val < self.prev.val:
                if len(self.firstDiscrepancy) == 0:
                    self.firstDiscrepancy.append(self.prev)
                    self.firstDiscrepancy.append(root)
                else:
                    self.secondDiscrepancy.append(self.prev)
                    self.secondDiscrepancy.append(root)
            self.prev = root
            inorder(root.right)
            
        inorder(root)
        if len(self.secondDiscrepancy) == 0:
            self.firstDiscrepancy[0].val,self.firstDiscrepancy[1].val = self.firstDiscrepancy[1].val,self.firstDiscrepancy[0].val
        else:
            self.firstDiscrepancy[0].val,self.secondDiscrepancy[1].val = self.secondDiscrepancy[1].val,self.firstDiscrepancy[0].val
        
