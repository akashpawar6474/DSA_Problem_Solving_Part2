# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:
        """
        Use list and reverse 
        or use deque and add levels from front
        """
        from collections import deque
        if root is None:
            return []
        q = deque()
        q.append(root)
        forwardLevelOrder = []
        while q:
            currLevel = []
            size = len(q)
            for i in range(size):
                top = q.popleft()
                currLevel.append(top.val)
                if top.left:
                    q.append(top.left)
                if top.right:
                    q.append(top.right)
            forwardLevelOrder.append(currLevel)
        

        forwardLevelOrder.reverse()
        return forwardLevelOrder
