class Solution:
    def transpose(self, matrix: List[List[int]]) -> List[List[int]]:
        """
        1 2 3   => 1 4
        4 5 6       2 5
                    3 6
                    
        square can be transposed in place
        but for rectangle we need extraa space to fill the array manually
        tc = O(n * m)
        sc = O(n * m) considering output array
        """
        def transposeSquare(matrix):
            n = len(matrix)
            for i in range(n):
                for j in range(i + 1):
                    matrix[i][j],matrix[j][i] = matrix[j][i],matrix[i][j]
            return matrix
        
        if len(matrix) == len(matrix[0]):
            return transposeSquare(matrix)
        else:
            newMatrix = [[0 for y in range(len(matrix))] for x in range(len(matrix[0]))]
            for i in range(len(matrix)):
                for j in range(len(matrix[0])):
                    newMatrix[j][i] = matrix[i][j]
            return newMatrix
                
-----------------------------------------------------------------------------------------------------
class Solution {
    fun transpose(matrix: Array<IntArray>): Array<IntArray> {
        """
        2   4  1                                    2  10  18
        10  5  11 = replace diagonal elements=>     4  5   7
        18  7  6                                    1  11  6 
        
        also is function 
        then lambda parameter in also is called when original function is called means 
        both will get called simultaneously
        
        tc = O(n * m)
        sc = O(n * m)
        """
        val rows : Int = matrix.size
        val cols : Int = matrix[0].size
        if (rows == cols){
            for (rowno in 0..rows - 1){
                for (colno in 0..rowno - 1){
                    matrix[rowno][colno] = matrix[colno][rowno].also {matrix[colno][rowno] = matrix[rowno][colno]}
                }
            }
            return matrix
        }
        else{
            val ans = Array(cols) { IntArray(rows) }
            var ansRowNo : Int = 0
            var ansColNo : Int = 0
            for (colno in 0..cols - 1){
                for (rowno in 0..rows - 1){
                    if (ansColNo == rows){
                        ansColNo = 0
                        ansRowNo++
                    }
                    ans[ansRowNo][ansColNo] = matrix[rowno][colno]
                    ansColNo++
                }
            }
            return ans
        }

    }
}
