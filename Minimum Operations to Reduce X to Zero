class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        """
        with our normal sliding window we wont able to solve this
        
        If we take sum of an array 
        [1,1,4,2,3] => 11 - 5 = 6
        [1,2,6,8,11] =>
        [11,10,9,5,3]
        
        [3,2,13,7,5,1,1,3] => 30 - 10 = 20
        [3,2,13,7,5,1,1,3,3,2,13,7,5,1,1,3]
        
        nope this wont going to work
        
        Idea is to count the sum of an array
        then reduce the x from the sum 
        and for that given amout find the max subarray
        
        so if we can reduce that length from total array length from the total length
        tc = O(n)
        sc = O(1)
        """
        arrSum = sum(nums)
        target = arrSum - x
        windowStart = 0
        maxWindowSize = -math.inf
        currSum = 0
        for windowEnd in range(len(nums)):
            currSum += nums[windowEnd]
            while windowStart <= windowEnd and currSum > target:
                currSum -= nums[windowStart]
                windowStart += 1
            if currSum == target:
                maxWindowSize = max(maxWindowSize, windowEnd - windowStart + 1)
        if maxWindowSize == -math.inf:
            return -1
        return len(nums) - maxWindowSize
    
    
    def dp(self, nums, x):
        """
        is this dp problem
        where at each step we are not sure which to choose
        so try all possibilities
        
        base case
            if x == 0
                then return 0
            if left > right:
                return math.inf
            if ele at left and ele at right both are greater than x
                then return math.inf
            
            if left is less than x
                then deduct val at left from x
                and recur with deducting from left + 1 
                and right both and take min steps
            if right is less than x
                then deduct val at right from x
                and recur with left then right - 1
            return min steps among all
            
        tc = O(n ^ 2 * x)
        sc = O(n ^ 2 * x)
        """
        def topDown(left,right,nums,ht,target):
            if target == 0:
                return 0
            if left > right:
                return math.inf
            if nums[left] > target and nums[right] > target:
                return math.inf
            if (left,right,target) in ht:
                return ht[(left,right,target)]
            byDeductingFromLeft = math.inf
            if nums[left] <= target:
                byDeductingFromLeft = topDown(left + 1,right,nums,ht,target - nums[left]) + 1
            byDeductingFromRight = math.inf
            if nums[right] <= target:
                byDeductingFromRight = topDown(left,right - 1,nums,ht,target - nums[right]) + 1
            ht[(left,right,target)] = min(byDeductingFromLeft,byDeductingFromRight)
            return ht[(left,right,target)]
        
        left = 0
        right = len(nums) - 1
        ht = {}
        ans = topDown(left,right,nums,ht,x)
        return ans if ans != math.inf else -1
