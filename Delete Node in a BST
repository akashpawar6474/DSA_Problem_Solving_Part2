
class Solution:
    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:
        """
        either take inorder succesor or predecessor anyone will work fine
        tc = O(h)
        sc = O(h)
        """
        def getInorderSuccessor(root):
            curr = root
            prev = None
            while curr.left is not None:
                prev = curr
                curr = curr.left
            prev.left = curr.right
            return curr
            
        def recur(root,key):
            if root is None:
                return None
            if root.val < key:
                root.right = recur(root.right, key)
                return root
            elif root.val > key:
                root.left = recur(root.left, key)
                return root
            elif root.left is None and root.right is None:
                return None
            elif root.left is None:
                return root.right
            elif root.right is None:
                return root.left
            else:
                if root.right.left is None:
                    root.right.left = root.left
                    return root.right
                else:
                    succ = getInorderSuccessor(root.right)
                    succ.left = root.left
                    succ.right = root.right
                    return succ
            return None
        
        return recur(root,key)
