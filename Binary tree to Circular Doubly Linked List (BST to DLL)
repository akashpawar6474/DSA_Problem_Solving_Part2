# Definition for a  binary tree node
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    # @param A : root node of tree
    # @return the root node in the tree
    def solve(self, A):
        """
        Idea is to convert left and right subtree to dll
        then attach root node to head of right subtree dll head
        then combine and return
        """
        def combineDLL(head1,head2):
            if head1 is None:
                return head2
            if head2 is None:
                return head1
            tail1 = head1.right
            tail2 = head2.right
            tail1.right = head2
            head2.left = tail1
            tail2.right = head1
            head1.left = tail2
            return head1

        def postOrder(root):
            if root is None:
                return None
            leftSubtreeDll = postOrder(root.left)
            rightSubtreeDll = postOrder(root.right)
            root.left = root
            root.right = root
            leftSubtreeDll = combineDLL(leftSubtreeDll,root)
            return combineDLL(leftSubtreeDll,rightSubtreeDll)
        
        ans = postOrder(A)
        print(ans)
        return ans

    def firstTry(self,A):
        def traverse(root):
            if root is None:
                return None
            if root.left:
                leftNode = traverse(root.left)
                while leftNode.right:
                    leftNode = leftNode.right
                leftNode.right = root
                root.left = leftNode
            if root.right:
                rightNode = traverse(root.right)
                while rightNode.left:
                    rightNode = rightNode.left
                rightNode.left = root
                root.right = rightNode
            return root
        
        def getHeadAndTail(root):
            head = root
            tail = root
            while head.left:
                head = head.left
            while tail.right:
                tail = tail.right
            return head,tail
        
        root = traverse(A)
        head,tail = getHeadAndTail(root)
        tail.right = head
        head.prev = tail
        return head
